{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"gd.rpc Geometry Dash Discord Rich Presence. Installing Python 3.7 or above is required. pip Installing the library with pip is quite simple: $ pip install gd.rpc Alternatively, the library can be installed from source: $ git clone https://github.com/nekitdev/gd.rpc.git $ cd gd.rpc $ python -m pip install . poetry You can add gd.rpc as a dependency with the following command: $ poetry add gd.rpc Or by directly specifying it in the configuration like so: [tool.poetry.dependencies] \"gd.rpc\" = \"^1.0.0\" Alternatively, you can add it directly from the source: [tool.poetry.dependencies.\"gd.rpc\"] git = \"https://github.com/nekitdev/gd.rpc.git\" Usage Using gd.rpc is as simple as: $ python -m gd.rpc config: ~/.config/gd/rpc.toml connecting... press [ctrl + c] or close the console to exit... Documentation You can find the documentation here . Support If you need support with the library, you can send an email or refer to the official Discord server . Changelog You can find the changelog here . Security Policy You can find the Security Policy of gd.rpc here . Contributing If you are interested in contributing to gd.rpc , make sure to take a look at the Contributing Guide , as well as the Code of Conduct . License gd.rpc is licensed under the MIT License terms. See License for details.","title":"Index"},{"location":"#gdrpc","text":"Geometry Dash Discord Rich Presence.","title":"gd.rpc"},{"location":"#installing","text":"Python 3.7 or above is required.","title":"Installing"},{"location":"#pip","text":"Installing the library with pip is quite simple: $ pip install gd.rpc Alternatively, the library can be installed from source: $ git clone https://github.com/nekitdev/gd.rpc.git $ cd gd.rpc $ python -m pip install .","title":"pip"},{"location":"#poetry","text":"You can add gd.rpc as a dependency with the following command: $ poetry add gd.rpc Or by directly specifying it in the configuration like so: [tool.poetry.dependencies] \"gd.rpc\" = \"^1.0.0\" Alternatively, you can add it directly from the source: [tool.poetry.dependencies.\"gd.rpc\"] git = \"https://github.com/nekitdev/gd.rpc.git\"","title":"poetry"},{"location":"#usage","text":"Using gd.rpc is as simple as: $ python -m gd.rpc config: ~/.config/gd/rpc.toml connecting... press [ctrl + c] or close the console to exit...","title":"Usage"},{"location":"#documentation","text":"You can find the documentation here .","title":"Documentation"},{"location":"#support","text":"If you need support with the library, you can send an email or refer to the official Discord server .","title":"Support"},{"location":"#changelog","text":"You can find the changelog here .","title":"Changelog"},{"location":"#security-policy","text":"You can find the Security Policy of gd.rpc here .","title":"Security Policy"},{"location":"#contributing","text":"If you are interested in contributing to gd.rpc , make sure to take a look at the Contributing Guide , as well as the Code of Conduct .","title":"Contributing"},{"location":"#license","text":"gd.rpc is licensed under the MIT License terms. See License for details.","title":"License"},{"location":"changelog/","text":"Changelog","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"code_of_conduct/","text":"Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct . Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq . Translations are available at https://contributor-covenant.org/translations .","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#enforcement-responsibilities","text":"Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement to conduct@nekit.dev . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident.","title":"Enforcement"},{"location":"code_of_conduct/#enforcement-guidelines","text":"Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:","title":"Enforcement Guidelines"},{"location":"code_of_conduct/#1-correction","text":"Community Impact : Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence : A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.","title":"1. Correction"},{"location":"code_of_conduct/#2-warning","text":"Community Impact : A violation through a single incident or series of actions. Consequence : A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.","title":"2. Warning"},{"location":"code_of_conduct/#3-temporary-ban","text":"Community Impact : A serious violation of community standards, including sustained inappropriate behavior. Consequence : A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.","title":"3. Temporary Ban"},{"location":"code_of_conduct/#4-permanent-ban","text":"Community Impact : Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence : A permanent ban from any sort of public interaction within the community.","title":"4. Permanent Ban"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 2.1, available at https://contributor-covenant.org/version/2/1/code_of_conduct . Community Impact Guidelines were inspired by Mozilla's Code of Conduct enforcement ladder . For answers to common questions about this code of conduct, see the FAQ at https://contributor-covenant.org/faq . Translations are available at https://contributor-covenant.org/translations .","title":"Attribution"},{"location":"config/","text":"ConfigData Bases: StringDict [ T ] Extension of StringDict[T] that allows accessing values as attributes. Source code in gd/rpc/config.py 30 31 32 33 34 35 36 class ConfigData ( StringDict [ T ]): \"\"\"Extension of [`StringDict[T]`][gd.typing.StringDict] that allows accessing values as attributes. \"\"\" def __getattr__ ( self , name : str ) -> Option [ T ]: return wrap_optional ( self . get ( name )) EditorConfig Represents the configuration of the RPC for when the user is in the editor. Source code in gd/rpc/config.py 42 43 44 45 46 47 48 49 @define () class EditorConfig : \"\"\"Represents the configuration of the RPC for when the user is in the editor.\"\"\" details : str \"\"\"The `details` of the RPC.\"\"\" state : str \"\"\"The `state` of the RPC.\"\"\" details : str class-attribute The details of the RPC. state : str class-attribute The state of the RPC. LevelConfig Represents the configuration of the RPC for when the user is playing some level. Source code in gd/rpc/config.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @define () class LevelConfig : \"\"\"Represents the configuration of the RPC for when the user is playing some level.\"\"\" details : str \"\"\"The `details` of the RPC.\"\"\" state : str \"\"\"The `state` of the RPC.\"\"\" small : str \"\"\"The `small` of the RPC.\"\"\" progress_precision : int \"\"\"The record precision to use.\"\"\" details : str class-attribute The details of the RPC. state : str class-attribute The state of the RPC. small : str class-attribute The small of the RPC. progress_precision : int class-attribute The record precision to use. SceneConfig The configuration to use for specific scenes, excluding the editor and level ones. Source code in gd/rpc/config.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 @define () class SceneConfig : \"\"\"The configuration to use for specific scenes, excluding the editor and level ones.\"\"\" main : str \"\"\"The name of the *main* scene.\"\"\" select : str \"\"\"The name of the *selection* scene.\"\"\" editor_or_level : str \"\"\"The name of the *editor or level* scene (depends on the context).\"\"\" search : str \"\"\"The name of the *search* scene.\"\"\" leaderboard : str \"\"\"The name of the *leaderboard* scene\"\"\" online : str \"\"\"The name of the *online* scene.\"\"\" official_select : str \"\"\"The name of the *official selection* scene.\"\"\" official_level : str \"\"\"The name of the *official level* scene.\"\"\" def get ( self , scene : Scene ) -> Optional [ str ]: return get_attribute ( self , case_fold ( scene . name ), None ) main : str class-attribute The name of the main scene. select : str class-attribute The name of the selection scene. editor_or_level : str class-attribute The name of the editor or level scene (depends on the context). search : str class-attribute The name of the search scene. leaderboard : str class-attribute The name of the leaderboard scene online : str class-attribute The name of the online scene. official_select : str class-attribute The name of the official selection scene. official_level : str class-attribute The name of the official level scene. DifficultyConfig The configuration to use for difficulty display. Source code in gd/rpc/config.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 @define () class DifficultyConfig : \"\"\"The configuration to use for difficulty display.\"\"\" unknown : str \"\"\"The name of the *unknown* difficulty.\"\"\" auto : str \"\"\"The name of the *auto* difficulty.\"\"\" easy : str \"\"\"The name of the *easy* difficulty.\"\"\" normal : str \"\"\"The name of the *normal* difficulty.\"\"\" hard : str \"\"\"The name of the *hard* difficulty.\"\"\" harder : str \"\"\"The name of the *harder* difficulty.\"\"\" insane : str \"\"\"The name of the *insane* difficulty.\"\"\" demon : str \"\"\"The name of the *unspecified demon* difficulty.\"\"\" easy_demon : str \"\"\"The name of the *easy demon* difficulty.\"\"\" medium_demon : str \"\"\"The name of the *medium demon* difficulty.\"\"\" hard_demon : str \"\"\"The name of the *hard demon* difficulty.\"\"\" insane_demon : str \"\"\"The name of the *insane demon* difficulty.\"\"\" extreme_demon : str \"\"\"The name of the *extreme demon* difficulty.\"\"\" def get ( self , difficulty : Difficulty ) -> Optional [ str ]: return get_attribute ( self , case_fold ( difficulty . name ), None ) unknown : str class-attribute The name of the unknown difficulty. auto : str class-attribute The name of the auto difficulty. easy : str class-attribute The name of the easy difficulty. normal : str class-attribute The name of the normal difficulty. hard : str class-attribute The name of the hard difficulty. harder : str class-attribute The name of the harder difficulty. insane : str class-attribute The name of the insane difficulty. demon : str class-attribute The name of the unspecified demon difficulty. easy_demon : str class-attribute The name of the easy demon difficulty. medium_demon : str class-attribute The name of the medium demon difficulty. hard_demon : str class-attribute The name of the hard demon difficulty. insane_demon : str class-attribute The name of the insane demon difficulty. extreme_demon : str class-attribute The name of the extreme demon difficulty. LevelTypeConfig Source code in gd/rpc/config.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @define () class LevelTypeConfig : null : str \"\"\"The name of the *null* (unknown) level type.\"\"\" official : str \"\"\"The name of the *official* level type.\"\"\" editor : str \"\"\"The name of the *editor* level type.\"\"\" saved : str \"\"\"The name of the *saved* level type.\"\"\" online : str \"\"\"The name of the *online* level type.\"\"\" def get ( self , level_type : LevelType ) -> Optional [ str ]: return get_attribute ( self , case_fold ( level_type . name ), None ) null : str class-attribute The name of the null (unknown) level type. official : str class-attribute The name of the official level type. editor : str class-attribute The name of the editor level type. saved : str class-attribute The name of the saved level type. online : str class-attribute The name of the online level type. ModeConfig The configuration to use for level play mode display. Source code in gd/rpc/config.py 146 147 148 149 150 151 152 153 @define () class ModeConfig : \"\"\"The configuration to use for level play mode display.\"\"\" normal : str \"\"\"The name of the *normal* mode.\"\"\" practice : str \"\"\"The name of the *practice* mode.\"\"\" normal : str class-attribute The name of the normal mode. practice : str class-attribute The name of the practice mode. Config Represents the configuration of the RPC. Source code in gd/rpc/config.pydefine () class Config : \"\"\"Represents the configuration of the RPC.\"\"\" process_name : str \"\"\"The process name of the game.\"\"\" refresh_seconds : int \"\"\"The seconds to wait before refreshing the RPC.\"\"\" client_id : int \"\"\"The client ID of the Discord application.\"\"\" editor : EditorConfig \"\"\"The configuration of the RPC for when the user is in the editor.\"\"\" level : LevelConfig \"\"\"The configuration of the RPC for when the user is playing some level.\"\"\" scene : SceneConfig \"\"\"The configuration to use for specific scenes, excluding the editor and level ones.\"\"\" difficulty : DifficultyConfig \"\"\"The configuration to use for difficulty display.\"\"\" level_type : LevelTypeConfig \"\"\"The configuration to use for level type display.\"\"\" mode : ModeConfig \"\"\"The configuration to use for level play mode display.\"\"\" # dynamic code ahead... @classmethod def from_string ( cls : Type [ C ], string : str ) -> C : \"\"\"Parses a [`Config`][gd.rpc.config.Config] from `string`. Arguments: string: The string to parse. Returns: The newly parsed [`Config`][gd.rpc.config.Config]. \"\"\" return cls . from_data ( cls . parse ( string )) @classmethod def from_path ( cls : Type [ C ], path : IntoPath , encoding : str = DEFAULT_ENCODING , errors : str = DEFAULT_ERRORS ) -> C : \"\"\"Parses a [`Config`][gd.rpc.config.Config] from file `path`. Arguments: path: The path to the config. Returns: The newly parsed [`Config`][gd.rpc.config.Config] instance. \"\"\" return cls . from_string ( Path ( path ) . read_text ( encoding , errors )) @staticmethod def parse ( string : str ) -> AnyConfigData : return cast ( AnyConfigData , toml . loads ( string , AnyConfigData )) @classmethod def from_data ( cls : Type [ C ], config_data : AnyConfigData ) -> C : \"\"\"Creates a [`Config`][gd.rpc.config.Config] from [`ConfigData`][gd.rpc.config.ConfigData]. Arguments: config_data: The configuration data to use. Returns: The newly created [`Config`][gd.rpc.config.Config] instance. \"\"\" default_config = DEFAULT_CONFIG rpc_data = config_data . rpc . unwrap_or_else ( AnyConfigData ) process_name = rpc_data . process_name . unwrap_or ( default_config . process_name ) refresh_seconds = rpc_data . refresh_seconds . unwrap_or ( default_config . refresh_seconds ) client_id = rpc_data . client_id . unwrap_or ( default_config . client_id ) editor_data = rpc_data . editor . unwrap_or_else ( AnyConfigData ) editor_config = default_config . editor editor = EditorConfig ( details = editor_data . details . unwrap_or ( editor_config . details ), state = editor_data . state . unwrap_or ( editor_config . state ), ) level_data = rpc_data . level . unwrap_or_else ( AnyConfigData ) level_config = default_config . level level = LevelConfig ( details = level_data . details . unwrap_or ( level_config . details ), state = level_data . state . unwrap_or ( level_config . state ), small = level_data . small . unwrap_or ( level_config . small ), progress_precision = level_data . progress_precision . unwrap_or ( level_config . progress_precision ), ) scene_data = rpc_data . scene . unwrap_or_else ( AnyConfigData ) scene_config = default_config . scene scene = SceneConfig ( main = scene_data . main . unwrap_or ( scene_config . main ), select = scene_data . select . unwrap_or ( scene_config . select ), editor_or_level = scene_data . editor_or_level . unwrap_or ( scene_config . editor_or_level ), search = scene_data . search . unwrap_or ( scene_config . search ), leaderboard = scene_data . leaderboard . unwrap_or ( scene_config . leaderboard ), online = scene_data . online . unwrap_or ( scene_config . online ), official_select = scene_data . official_select . unwrap_or ( scene_config . official_select ), official_level = scene_data . official_level . unwrap_or ( scene_config . official_level ), ) difficulty_data = rpc_data . difficulty . unwrap_or_else ( AnyConfigData ) difficulty_config = default_config . difficulty difficulty = DifficultyConfig ( unknown = difficulty_data . unknown . unwrap_or ( difficulty_config . unknown ), auto = difficulty_data . auto . unwrap_or ( difficulty_config . auto ), easy = difficulty_data . easy . unwrap_or ( difficulty_config . easy ), normal = difficulty_data . normal . unwrap_or ( difficulty_config . normal ), hard = difficulty_data . hard . unwrap_or ( difficulty_config . hard ), harder = difficulty_data . harder . unwrap_or ( difficulty_config . harder ), insane = difficulty_data . insane . unwrap_or ( difficulty_config . insane ), demon = difficulty_data . demon . unwrap_or ( difficulty_config . demon ), easy_demon = difficulty_data . easy_demon . unwrap_or ( difficulty_config . easy_demon ), medium_demon = difficulty_data . medium_demon . unwrap_or ( difficulty_config . medium_demon ), hard_demon = difficulty_data . hard_demon . unwrap_or ( difficulty_config . hard_demon ), insane_demon = difficulty_data . insane_demon . unwrap_or ( difficulty_config . insane_demon ), extreme_demon = difficulty_data . extreme_demon . unwrap_or ( difficulty_config . extreme_demon ), ) level_type_data = rpc_data . level_type . unwrap_or_else ( AnyConfigData ) level_type_config = default_config . level_type level_type = LevelTypeConfig ( null = level_type_data . null . unwrap_or ( level_type_config . null ), official = level_type_data . official . unwrap_or ( level_type_config . official ), editor = level_type_data . editor . unwrap_or ( level_type_config . editor ), saved = level_type_data . saved . unwrap_or ( level_type_config . saved ), online = level_type_data . online . unwrap_or ( level_type_config . online ), ) mode_data = rpc_data . mode . unwrap_or_else ( AnyConfigData ) mode_config = default_config . mode mode = ModeConfig ( normal = mode_data . normal . unwrap_or ( mode_config . normal ), practice = mode_data . practice . unwrap_or ( mode_config . practice ), ) return cls ( process_name = process_name , refresh_seconds = refresh_seconds , client_id = client_id , editor = editor , level = level , scene = scene , difficulty = difficulty , level_type = level_type , mode = mode , ) @classmethod def unsafe_from_string ( cls : Type [ C ], string : str ) -> C : return cls . unsafe_from_data ( cls . parse ( string )) @classmethod def unsafe_from_path ( cls : Type [ C ], path : IntoPath , encoding : str = DEFAULT_ENCODING , errors : str = DEFAULT_ERRORS ) -> C : return cls . unsafe_from_string ( Path ( path ) . read_text ( encoding , errors )) @classmethod def unsafe_from_data ( cls : Type [ C ], config_data : AnyConfigData ) -> C : rpc_data = config_data . rpc . expect ( EXPECTED_RPC ) process_name = rpc_data . process_name . expect ( EXPECTED_RPC_PROCESS_NAME ) refresh_seconds = rpc_data . refresh_seconds . expect ( EXPECTED_RPC_REFRESH_SECONDS ) client_id = rpc_data . client_id . expect ( EXPECTED_RPC_CLIENT_ID ) editor_data = rpc_data . editor . expect ( EXPECTED_RPC_EDITOR ) editor = EditorConfig ( details = editor_data . details . expect ( EXPECTED_RPC_EDITOR_DETAILS ), state = editor_data . state . expect ( EXPECTED_RPC_EDITOR_STATE ), ) level_data = rpc_data . level . expect ( EXPECTED_RPC_LEVEL ) level = LevelConfig ( details = level_data . details . expect ( EXPECTED_RPC_LEVEL_DETAILS ), state = level_data . state . expect ( EXPECTED_RPC_LEVEL_STATE ), small = level_data . small . expect ( EXPECTED_RPC_LEVEL_SMALL ), progress_precision = level_data . progress_precision . expect ( EXPECTED_RPC_LEVEL_PROGRESS_PRECISION ), ) scene_data = rpc_data . scene . expect ( EXPECTED_RPC_SCENE ) scene = SceneConfig ( main = scene_data . main . expect ( EXPECTED_RPC_SCENE_MAIN ), select = scene_data . select . expect ( EXPECTED_RPC_SCENE_SELECT ), editor_or_level = scene_data . editor_or_level . expect ( EXPECTED_RPC_SCENE_EDITOR_OR_LEVEL ), search = scene_data . search . expect ( EXPECTED_RPC_SCENE_SEARCH ), leaderboard = scene_data . leaderboard . expect ( EXPECTED_RPC_SCENE_LEADERBOARD ), online = scene_data . online . expect ( EXPECTED_RPC_SCENE_ONLINE ), official_select = scene_data . official_select . expect ( EXPECTED_RPC_SCENE_OFFICIAL_SELECT ), official_level = scene_data . official_level . expect ( EXPECTED_RPC_SCENE_OFFICIAL_LEVEL ), ) difficulty_data = rpc_data . difficulty . expect ( EXPECTED_RPC_DIFFICULTY ) difficulty = DifficultyConfig ( unknown = difficulty_data . unknown . expect ( EXPECTED_RPC_DIFFICULTY_UNKNOWN ), auto = difficulty_data . auto . expect ( EXPECTED_RPC_DIFFICULTY_AUTO ), easy = difficulty_data . easy . expect ( EXPECTED_RPC_DIFFICULTY_EASY ), normal = difficulty_data . normal . expect ( EXPECTED_RPC_DIFFICULTY_NORMAL ), hard = difficulty_data . hard . expect ( EXPECTED_RPC_DIFFICULTY_HARD ), harder = difficulty_data . harder . expect ( EXPECTED_RPC_DIFFICULTY_HARDER ), insane = difficulty_data . insane . expect ( EXPECTED_RPC_DIFFICULTY_INSANE ), demon = difficulty_data . demon . expect ( EXPECTED_RPC_DIFFICULTY_DEMON ), easy_demon = difficulty_data . easy_demon . expect ( EXPECTED_RPC_DIFFICULTY_EASY_DEMON ), medium_demon = difficulty_data . medium_demon . expect ( EXPECTED_RPC_DIFFICULTY_MEDIUM_DEMON ), hard_demon = difficulty_data . hard_demon . expect ( EXPECTED_RPC_DIFFICULTY_HARD_DEMON ), insane_demon = difficulty_data . insane_demon . expect ( EXPECTED_RPC_DIFFICULTY_INSANE_DEMON ), extreme_demon = difficulty_data . extreme_demon . expect ( EXPECTED_RPC_DIFFICULTY_EXTREME_DEMON ), ) level_type_data = rpc_data . level_type . expect ( EXPECTED_RPC_LEVEL_TYPE ) level_type = LevelTypeConfig ( null = level_type_data . null . expect ( EXPECTED_RPC_LEVEL_TYPE_NULL ), official = level_type_data . official . expect ( EXPECTED_RPC_LEVEL_TYPE_OFFICIAL ), editor = level_type_data . editor . expect ( EXPECTED_RPC_LEVEL_TYPE_EDITOR ), saved = level_type_data . saved . expect ( EXPECTED_RPC_LEVEL_TYPE_SAVED ), online = level_type_data . online . expect ( EXPECTED_RPC_LEVEL_TYPE_ONLINE ), ) mode_data = rpc_data . mode . expect ( EXPECTED_RPC_MODE ) mode = ModeConfig ( normal = mode_data . normal . expect ( EXPECTED_RPC_MODE_NORMAL ), practice = mode_data . practice . expect ( EXPECTED_RPC_MODE_PRACTICE ), ) return cls ( process_name = process_name , refresh_seconds = refresh_seconds , client_id = client_id , editor = editor , level = level , scene = scene , difficulty = difficulty , level_type = level_type , mode = mode , ) process_name : str class-attribute The process name of the game. refresh_seconds : int class-attribute The seconds to wait before refreshing the RPC. client_id : int class-attribute The client ID of the Discord application. editor : EditorConfig class-attribute The configuration of the RPC for when the user is in the editor. level : LevelConfig class-attribute The configuration of the RPC for when the user is playing some level. scene : SceneConfig class-attribute The configuration to use for specific scenes, excluding the editor and level ones. difficulty : DifficultyConfig class-attribute The configuration to use for difficulty display. level_type : LevelTypeConfig class-attribute The configuration to use for level type display. mode : ModeConfig class-attribute The configuration to use for level play mode display. from_string ( string : str ) -> C classmethod Parses a Config from string . Parameters: Name Type Description Default string str The string to parse. required Returns: Type Description C The newly parsed Config . Source code in gd/rpc/config.py 243 244 245 246 247 248 249 250 251 252 253 @classmethod def from_string ( cls : Type [ C ], string : str ) -> C : \"\"\"Parses a [`Config`][gd.rpc.config.Config] from `string`. Arguments: string: The string to parse. Returns: The newly parsed [`Config`][gd.rpc.config.Config]. \"\"\" return cls . from_data ( cls . parse ( string )) from_path ( path : IntoPath , encoding : str = DEFAULT_ENCODING , errors : str = DEFAULT_ERRORS ) -> C classmethod Parses a Config from file path . Parameters: Name Type Description Default path IntoPath The path to the config. required Returns: Type Description C The newly parsed Config instance. Source code in gd/rpc/config.py 255 256 257 258 259 260 261 262 263 264 265 266 267 @classmethod def from_path ( cls : Type [ C ], path : IntoPath , encoding : str = DEFAULT_ENCODING , errors : str = DEFAULT_ERRORS ) -> C : \"\"\"Parses a [`Config`][gd.rpc.config.Config] from file `path`. Arguments: path: The path to the config. Returns: The newly parsed [`Config`][gd.rpc.config.Config] instance. \"\"\" return cls . from_string ( Path ( path ) . read_text ( encoding , errors )) from_data ( config_data : AnyConfigData ) -> C classmethod Creates a Config from ConfigData . Parameters: Name Type Description Default config_data AnyConfigData The configuration data to use. required Returns: Type Description C The newly created Config instance. Source code in gd/rpc/config.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 @classmethod def from_data ( cls : Type [ C ], config_data : AnyConfigData ) -> C : \"\"\"Creates a [`Config`][gd.rpc.config.Config] from [`ConfigData`][gd.rpc.config.ConfigData]. Arguments: config_data: The configuration data to use. Returns: The newly created [`Config`][gd.rpc.config.Config] instance. \"\"\" default_config = DEFAULT_CONFIG rpc_data = config_data . rpc . unwrap_or_else ( AnyConfigData ) process_name = rpc_data . process_name . unwrap_or ( default_config . process_name ) refresh_seconds = rpc_data . refresh_seconds . unwrap_or ( default_config . refresh_seconds ) client_id = rpc_data . client_id . unwrap_or ( default_config . client_id ) editor_data = rpc_data . editor . unwrap_or_else ( AnyConfigData ) editor_config = default_config . editor editor = EditorConfig ( details = editor_data . details . unwrap_or ( editor_config . details ), state = editor_data . state . unwrap_or ( editor_config . state ), ) level_data = rpc_data . level . unwrap_or_else ( AnyConfigData ) level_config = default_config . level level = LevelConfig ( details = level_data . details . unwrap_or ( level_config . details ), state = level_data . state . unwrap_or ( level_config . state ), small = level_data . small . unwrap_or ( level_config . small ), progress_precision = level_data . progress_precision . unwrap_or ( level_config . progress_precision ), ) scene_data = rpc_data . scene . unwrap_or_else ( AnyConfigData ) scene_config = default_config . scene scene = SceneConfig ( main = scene_data . main . unwrap_or ( scene_config . main ), select = scene_data . select . unwrap_or ( scene_config . select ), editor_or_level = scene_data . editor_or_level . unwrap_or ( scene_config . editor_or_level ), search = scene_data . search . unwrap_or ( scene_config . search ), leaderboard = scene_data . leaderboard . unwrap_or ( scene_config . leaderboard ), online = scene_data . online . unwrap_or ( scene_config . online ), official_select = scene_data . official_select . unwrap_or ( scene_config . official_select ), official_level = scene_data . official_level . unwrap_or ( scene_config . official_level ), ) difficulty_data = rpc_data . difficulty . unwrap_or_else ( AnyConfigData ) difficulty_config = default_config . difficulty difficulty = DifficultyConfig ( unknown = difficulty_data . unknown . unwrap_or ( difficulty_config . unknown ), auto = difficulty_data . auto . unwrap_or ( difficulty_config . auto ), easy = difficulty_data . easy . unwrap_or ( difficulty_config . easy ), normal = difficulty_data . normal . unwrap_or ( difficulty_config . normal ), hard = difficulty_data . hard . unwrap_or ( difficulty_config . hard ), harder = difficulty_data . harder . unwrap_or ( difficulty_config . harder ), insane = difficulty_data . insane . unwrap_or ( difficulty_config . insane ), demon = difficulty_data . demon . unwrap_or ( difficulty_config . demon ), easy_demon = difficulty_data . easy_demon . unwrap_or ( difficulty_config . easy_demon ), medium_demon = difficulty_data . medium_demon . unwrap_or ( difficulty_config . medium_demon ), hard_demon = difficulty_data . hard_demon . unwrap_or ( difficulty_config . hard_demon ), insane_demon = difficulty_data . insane_demon . unwrap_or ( difficulty_config . insane_demon ), extreme_demon = difficulty_data . extreme_demon . unwrap_or ( difficulty_config . extreme_demon ), ) level_type_data = rpc_data . level_type . unwrap_or_else ( AnyConfigData ) level_type_config = default_config . level_type level_type = LevelTypeConfig ( null = level_type_data . null . unwrap_or ( level_type_config . null ), official = level_type_data . official . unwrap_or ( level_type_config . official ), editor = level_type_data . editor . unwrap_or ( level_type_config . editor ), saved = level_type_data . saved . unwrap_or ( level_type_config . saved ), online = level_type_data . online . unwrap_or ( level_type_config . online ), ) mode_data = rpc_data . mode . unwrap_or_else ( AnyConfigData ) mode_config = default_config . mode mode = ModeConfig ( normal = mode_data . normal . unwrap_or ( mode_config . normal ), practice = mode_data . practice . unwrap_or ( mode_config . practice ), ) return cls ( process_name = process_name , refresh_seconds = refresh_seconds , client_id = client_id , editor = editor , level = level , scene = scene , difficulty = difficulty , level_type = level_type , mode = mode , )","title":"Config"},{"location":"config/#gd.rpc.config.ConfigData","text":"Bases: StringDict [ T ] Extension of StringDict[T] that allows accessing values as attributes. Source code in gd/rpc/config.py 30 31 32 33 34 35 36 class ConfigData ( StringDict [ T ]): \"\"\"Extension of [`StringDict[T]`][gd.typing.StringDict] that allows accessing values as attributes. \"\"\" def __getattr__ ( self , name : str ) -> Option [ T ]: return wrap_optional ( self . get ( name ))","title":"ConfigData"},{"location":"config/#gd.rpc.config.EditorConfig","text":"Represents the configuration of the RPC for when the user is in the editor. Source code in gd/rpc/config.py 42 43 44 45 46 47 48 49 @define () class EditorConfig : \"\"\"Represents the configuration of the RPC for when the user is in the editor.\"\"\" details : str \"\"\"The `details` of the RPC.\"\"\" state : str \"\"\"The `state` of the RPC.\"\"\"","title":"EditorConfig"},{"location":"config/#gd.rpc.config.EditorConfig.details","text":"The details of the RPC.","title":"details"},{"location":"config/#gd.rpc.config.EditorConfig.state","text":"The state of the RPC.","title":"state"},{"location":"config/#gd.rpc.config.LevelConfig","text":"Represents the configuration of the RPC for when the user is playing some level. Source code in gd/rpc/config.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @define () class LevelConfig : \"\"\"Represents the configuration of the RPC for when the user is playing some level.\"\"\" details : str \"\"\"The `details` of the RPC.\"\"\" state : str \"\"\"The `state` of the RPC.\"\"\" small : str \"\"\"The `small` of the RPC.\"\"\" progress_precision : int \"\"\"The record precision to use.\"\"\"","title":"LevelConfig"},{"location":"config/#gd.rpc.config.LevelConfig.details","text":"The details of the RPC.","title":"details"},{"location":"config/#gd.rpc.config.LevelConfig.state","text":"The state of the RPC.","title":"state"},{"location":"config/#gd.rpc.config.LevelConfig.small","text":"The small of the RPC.","title":"small"},{"location":"config/#gd.rpc.config.LevelConfig.progress_precision","text":"The record precision to use.","title":"progress_precision"},{"location":"config/#gd.rpc.config.SceneConfig","text":"The configuration to use for specific scenes, excluding the editor and level ones. Source code in gd/rpc/config.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 @define () class SceneConfig : \"\"\"The configuration to use for specific scenes, excluding the editor and level ones.\"\"\" main : str \"\"\"The name of the *main* scene.\"\"\" select : str \"\"\"The name of the *selection* scene.\"\"\" editor_or_level : str \"\"\"The name of the *editor or level* scene (depends on the context).\"\"\" search : str \"\"\"The name of the *search* scene.\"\"\" leaderboard : str \"\"\"The name of the *leaderboard* scene\"\"\" online : str \"\"\"The name of the *online* scene.\"\"\" official_select : str \"\"\"The name of the *official selection* scene.\"\"\" official_level : str \"\"\"The name of the *official level* scene.\"\"\" def get ( self , scene : Scene ) -> Optional [ str ]: return get_attribute ( self , case_fold ( scene . name ), None )","title":"SceneConfig"},{"location":"config/#gd.rpc.config.SceneConfig.main","text":"The name of the main scene.","title":"main"},{"location":"config/#gd.rpc.config.SceneConfig.select","text":"The name of the selection scene.","title":"select"},{"location":"config/#gd.rpc.config.SceneConfig.editor_or_level","text":"The name of the editor or level scene (depends on the context).","title":"editor_or_level"},{"location":"config/#gd.rpc.config.SceneConfig.search","text":"The name of the search scene.","title":"search"},{"location":"config/#gd.rpc.config.SceneConfig.leaderboard","text":"The name of the leaderboard scene","title":"leaderboard"},{"location":"config/#gd.rpc.config.SceneConfig.online","text":"The name of the online scene.","title":"online"},{"location":"config/#gd.rpc.config.SceneConfig.official_select","text":"The name of the official selection scene.","title":"official_select"},{"location":"config/#gd.rpc.config.SceneConfig.official_level","text":"The name of the official level scene.","title":"official_level"},{"location":"config/#gd.rpc.config.DifficultyConfig","text":"The configuration to use for difficulty display. Source code in gd/rpc/config.py 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 @define () class DifficultyConfig : \"\"\"The configuration to use for difficulty display.\"\"\" unknown : str \"\"\"The name of the *unknown* difficulty.\"\"\" auto : str \"\"\"The name of the *auto* difficulty.\"\"\" easy : str \"\"\"The name of the *easy* difficulty.\"\"\" normal : str \"\"\"The name of the *normal* difficulty.\"\"\" hard : str \"\"\"The name of the *hard* difficulty.\"\"\" harder : str \"\"\"The name of the *harder* difficulty.\"\"\" insane : str \"\"\"The name of the *insane* difficulty.\"\"\" demon : str \"\"\"The name of the *unspecified demon* difficulty.\"\"\" easy_demon : str \"\"\"The name of the *easy demon* difficulty.\"\"\" medium_demon : str \"\"\"The name of the *medium demon* difficulty.\"\"\" hard_demon : str \"\"\"The name of the *hard demon* difficulty.\"\"\" insane_demon : str \"\"\"The name of the *insane demon* difficulty.\"\"\" extreme_demon : str \"\"\"The name of the *extreme demon* difficulty.\"\"\" def get ( self , difficulty : Difficulty ) -> Optional [ str ]: return get_attribute ( self , case_fold ( difficulty . name ), None )","title":"DifficultyConfig"},{"location":"config/#gd.rpc.config.DifficultyConfig.unknown","text":"The name of the unknown difficulty.","title":"unknown"},{"location":"config/#gd.rpc.config.DifficultyConfig.auto","text":"The name of the auto difficulty.","title":"auto"},{"location":"config/#gd.rpc.config.DifficultyConfig.easy","text":"The name of the easy difficulty.","title":"easy"},{"location":"config/#gd.rpc.config.DifficultyConfig.normal","text":"The name of the normal difficulty.","title":"normal"},{"location":"config/#gd.rpc.config.DifficultyConfig.hard","text":"The name of the hard difficulty.","title":"hard"},{"location":"config/#gd.rpc.config.DifficultyConfig.harder","text":"The name of the harder difficulty.","title":"harder"},{"location":"config/#gd.rpc.config.DifficultyConfig.insane","text":"The name of the insane difficulty.","title":"insane"},{"location":"config/#gd.rpc.config.DifficultyConfig.demon","text":"The name of the unspecified demon difficulty.","title":"demon"},{"location":"config/#gd.rpc.config.DifficultyConfig.easy_demon","text":"The name of the easy demon difficulty.","title":"easy_demon"},{"location":"config/#gd.rpc.config.DifficultyConfig.medium_demon","text":"The name of the medium demon difficulty.","title":"medium_demon"},{"location":"config/#gd.rpc.config.DifficultyConfig.hard_demon","text":"The name of the hard demon difficulty.","title":"hard_demon"},{"location":"config/#gd.rpc.config.DifficultyConfig.insane_demon","text":"The name of the insane demon difficulty.","title":"insane_demon"},{"location":"config/#gd.rpc.config.DifficultyConfig.extreme_demon","text":"The name of the extreme demon difficulty.","title":"extreme_demon"},{"location":"config/#gd.rpc.config.LevelTypeConfig","text":"Source code in gd/rpc/config.py 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 @define () class LevelTypeConfig : null : str \"\"\"The name of the *null* (unknown) level type.\"\"\" official : str \"\"\"The name of the *official* level type.\"\"\" editor : str \"\"\"The name of the *editor* level type.\"\"\" saved : str \"\"\"The name of the *saved* level type.\"\"\" online : str \"\"\"The name of the *online* level type.\"\"\" def get ( self , level_type : LevelType ) -> Optional [ str ]: return get_attribute ( self , case_fold ( level_type . name ), None )","title":"LevelTypeConfig"},{"location":"config/#gd.rpc.config.LevelTypeConfig.null","text":"The name of the null (unknown) level type.","title":"null"},{"location":"config/#gd.rpc.config.LevelTypeConfig.official","text":"The name of the official level type.","title":"official"},{"location":"config/#gd.rpc.config.LevelTypeConfig.editor","text":"The name of the editor level type.","title":"editor"},{"location":"config/#gd.rpc.config.LevelTypeConfig.saved","text":"The name of the saved level type.","title":"saved"},{"location":"config/#gd.rpc.config.LevelTypeConfig.online","text":"The name of the online level type.","title":"online"},{"location":"config/#gd.rpc.config.ModeConfig","text":"The configuration to use for level play mode display. Source code in gd/rpc/config.py 146 147 148 149 150 151 152 153 @define () class ModeConfig : \"\"\"The configuration to use for level play mode display.\"\"\" normal : str \"\"\"The name of the *normal* mode.\"\"\" practice : str \"\"\"The name of the *practice* mode.\"\"\"","title":"ModeConfig"},{"location":"config/#gd.rpc.config.ModeConfig.normal","text":"The name of the normal mode.","title":"normal"},{"location":"config/#gd.rpc.config.ModeConfig.practice","text":"The name of the practice mode.","title":"practice"},{"location":"config/#gd.rpc.config.Config","text":"Represents the configuration of the RPC. Source code in gd/rpc/config.pydefine () class Config : \"\"\"Represents the configuration of the RPC.\"\"\" process_name : str \"\"\"The process name of the game.\"\"\" refresh_seconds : int \"\"\"The seconds to wait before refreshing the RPC.\"\"\" client_id : int \"\"\"The client ID of the Discord application.\"\"\" editor : EditorConfig \"\"\"The configuration of the RPC for when the user is in the editor.\"\"\" level : LevelConfig \"\"\"The configuration of the RPC for when the user is playing some level.\"\"\" scene : SceneConfig \"\"\"The configuration to use for specific scenes, excluding the editor and level ones.\"\"\" difficulty : DifficultyConfig \"\"\"The configuration to use for difficulty display.\"\"\" level_type : LevelTypeConfig \"\"\"The configuration to use for level type display.\"\"\" mode : ModeConfig \"\"\"The configuration to use for level play mode display.\"\"\" # dynamic code ahead... @classmethod def from_string ( cls : Type [ C ], string : str ) -> C : \"\"\"Parses a [`Config`][gd.rpc.config.Config] from `string`. Arguments: string: The string to parse. Returns: The newly parsed [`Config`][gd.rpc.config.Config]. \"\"\" return cls . from_data ( cls . parse ( string )) @classmethod def from_path ( cls : Type [ C ], path : IntoPath , encoding : str = DEFAULT_ENCODING , errors : str = DEFAULT_ERRORS ) -> C : \"\"\"Parses a [`Config`][gd.rpc.config.Config] from file `path`. Arguments: path: The path to the config. Returns: The newly parsed [`Config`][gd.rpc.config.Config] instance. \"\"\" return cls . from_string ( Path ( path ) . read_text ( encoding , errors )) @staticmethod def parse ( string : str ) -> AnyConfigData : return cast ( AnyConfigData , toml . loads ( string , AnyConfigData )) @classmethod def from_data ( cls : Type [ C ], config_data : AnyConfigData ) -> C : \"\"\"Creates a [`Config`][gd.rpc.config.Config] from [`ConfigData`][gd.rpc.config.ConfigData]. Arguments: config_data: The configuration data to use. Returns: The newly created [`Config`][gd.rpc.config.Config] instance. \"\"\" default_config = DEFAULT_CONFIG rpc_data = config_data . rpc . unwrap_or_else ( AnyConfigData ) process_name = rpc_data . process_name . unwrap_or ( default_config . process_name ) refresh_seconds = rpc_data . refresh_seconds . unwrap_or ( default_config . refresh_seconds ) client_id = rpc_data . client_id . unwrap_or ( default_config . client_id ) editor_data = rpc_data . editor . unwrap_or_else ( AnyConfigData ) editor_config = default_config . editor editor = EditorConfig ( details = editor_data . details . unwrap_or ( editor_config . details ), state = editor_data . state . unwrap_or ( editor_config . state ), ) level_data = rpc_data . level . unwrap_or_else ( AnyConfigData ) level_config = default_config . level level = LevelConfig ( details = level_data . details . unwrap_or ( level_config . details ), state = level_data . state . unwrap_or ( level_config . state ), small = level_data . small . unwrap_or ( level_config . small ), progress_precision = level_data . progress_precision . unwrap_or ( level_config . progress_precision ), ) scene_data = rpc_data . scene . unwrap_or_else ( AnyConfigData ) scene_config = default_config . scene scene = SceneConfig ( main = scene_data . main . unwrap_or ( scene_config . main ), select = scene_data . select . unwrap_or ( scene_config . select ), editor_or_level = scene_data . editor_or_level . unwrap_or ( scene_config . editor_or_level ), search = scene_data . search . unwrap_or ( scene_config . search ), leaderboard = scene_data . leaderboard . unwrap_or ( scene_config . leaderboard ), online = scene_data . online . unwrap_or ( scene_config . online ), official_select = scene_data . official_select . unwrap_or ( scene_config . official_select ), official_level = scene_data . official_level . unwrap_or ( scene_config . official_level ), ) difficulty_data = rpc_data . difficulty . unwrap_or_else ( AnyConfigData ) difficulty_config = default_config . difficulty difficulty = DifficultyConfig ( unknown = difficulty_data . unknown . unwrap_or ( difficulty_config . unknown ), auto = difficulty_data . auto . unwrap_or ( difficulty_config . auto ), easy = difficulty_data . easy . unwrap_or ( difficulty_config . easy ), normal = difficulty_data . normal . unwrap_or ( difficulty_config . normal ), hard = difficulty_data . hard . unwrap_or ( difficulty_config . hard ), harder = difficulty_data . harder . unwrap_or ( difficulty_config . harder ), insane = difficulty_data . insane . unwrap_or ( difficulty_config . insane ), demon = difficulty_data . demon . unwrap_or ( difficulty_config . demon ), easy_demon = difficulty_data . easy_demon . unwrap_or ( difficulty_config . easy_demon ), medium_demon = difficulty_data . medium_demon . unwrap_or ( difficulty_config . medium_demon ), hard_demon = difficulty_data . hard_demon . unwrap_or ( difficulty_config . hard_demon ), insane_demon = difficulty_data . insane_demon . unwrap_or ( difficulty_config . insane_demon ), extreme_demon = difficulty_data . extreme_demon . unwrap_or ( difficulty_config . extreme_demon ), ) level_type_data = rpc_data . level_type . unwrap_or_else ( AnyConfigData ) level_type_config = default_config . level_type level_type = LevelTypeConfig ( null = level_type_data . null . unwrap_or ( level_type_config . null ), official = level_type_data . official . unwrap_or ( level_type_config . official ), editor = level_type_data . editor . unwrap_or ( level_type_config . editor ), saved = level_type_data . saved . unwrap_or ( level_type_config . saved ), online = level_type_data . online . unwrap_or ( level_type_config . online ), ) mode_data = rpc_data . mode . unwrap_or_else ( AnyConfigData ) mode_config = default_config . mode mode = ModeConfig ( normal = mode_data . normal . unwrap_or ( mode_config . normal ), practice = mode_data . practice . unwrap_or ( mode_config . practice ), ) return cls ( process_name = process_name , refresh_seconds = refresh_seconds , client_id = client_id , editor = editor , level = level , scene = scene , difficulty = difficulty , level_type = level_type , mode = mode , ) @classmethod def unsafe_from_string ( cls : Type [ C ], string : str ) -> C : return cls . unsafe_from_data ( cls . parse ( string )) @classmethod def unsafe_from_path ( cls : Type [ C ], path : IntoPath , encoding : str = DEFAULT_ENCODING , errors : str = DEFAULT_ERRORS ) -> C : return cls . unsafe_from_string ( Path ( path ) . read_text ( encoding , errors )) @classmethod def unsafe_from_data ( cls : Type [ C ], config_data : AnyConfigData ) -> C : rpc_data = config_data . rpc . expect ( EXPECTED_RPC ) process_name = rpc_data . process_name . expect ( EXPECTED_RPC_PROCESS_NAME ) refresh_seconds = rpc_data . refresh_seconds . expect ( EXPECTED_RPC_REFRESH_SECONDS ) client_id = rpc_data . client_id . expect ( EXPECTED_RPC_CLIENT_ID ) editor_data = rpc_data . editor . expect ( EXPECTED_RPC_EDITOR ) editor = EditorConfig ( details = editor_data . details . expect ( EXPECTED_RPC_EDITOR_DETAILS ), state = editor_data . state . expect ( EXPECTED_RPC_EDITOR_STATE ), ) level_data = rpc_data . level . expect ( EXPECTED_RPC_LEVEL ) level = LevelConfig ( details = level_data . details . expect ( EXPECTED_RPC_LEVEL_DETAILS ), state = level_data . state . expect ( EXPECTED_RPC_LEVEL_STATE ), small = level_data . small . expect ( EXPECTED_RPC_LEVEL_SMALL ), progress_precision = level_data . progress_precision . expect ( EXPECTED_RPC_LEVEL_PROGRESS_PRECISION ), ) scene_data = rpc_data . scene . expect ( EXPECTED_RPC_SCENE ) scene = SceneConfig ( main = scene_data . main . expect ( EXPECTED_RPC_SCENE_MAIN ), select = scene_data . select . expect ( EXPECTED_RPC_SCENE_SELECT ), editor_or_level = scene_data . editor_or_level . expect ( EXPECTED_RPC_SCENE_EDITOR_OR_LEVEL ), search = scene_data . search . expect ( EXPECTED_RPC_SCENE_SEARCH ), leaderboard = scene_data . leaderboard . expect ( EXPECTED_RPC_SCENE_LEADERBOARD ), online = scene_data . online . expect ( EXPECTED_RPC_SCENE_ONLINE ), official_select = scene_data . official_select . expect ( EXPECTED_RPC_SCENE_OFFICIAL_SELECT ), official_level = scene_data . official_level . expect ( EXPECTED_RPC_SCENE_OFFICIAL_LEVEL ), ) difficulty_data = rpc_data . difficulty . expect ( EXPECTED_RPC_DIFFICULTY ) difficulty = DifficultyConfig ( unknown = difficulty_data . unknown . expect ( EXPECTED_RPC_DIFFICULTY_UNKNOWN ), auto = difficulty_data . auto . expect ( EXPECTED_RPC_DIFFICULTY_AUTO ), easy = difficulty_data . easy . expect ( EXPECTED_RPC_DIFFICULTY_EASY ), normal = difficulty_data . normal . expect ( EXPECTED_RPC_DIFFICULTY_NORMAL ), hard = difficulty_data . hard . expect ( EXPECTED_RPC_DIFFICULTY_HARD ), harder = difficulty_data . harder . expect ( EXPECTED_RPC_DIFFICULTY_HARDER ), insane = difficulty_data . insane . expect ( EXPECTED_RPC_DIFFICULTY_INSANE ), demon = difficulty_data . demon . expect ( EXPECTED_RPC_DIFFICULTY_DEMON ), easy_demon = difficulty_data . easy_demon . expect ( EXPECTED_RPC_DIFFICULTY_EASY_DEMON ), medium_demon = difficulty_data . medium_demon . expect ( EXPECTED_RPC_DIFFICULTY_MEDIUM_DEMON ), hard_demon = difficulty_data . hard_demon . expect ( EXPECTED_RPC_DIFFICULTY_HARD_DEMON ), insane_demon = difficulty_data . insane_demon . expect ( EXPECTED_RPC_DIFFICULTY_INSANE_DEMON ), extreme_demon = difficulty_data . extreme_demon . expect ( EXPECTED_RPC_DIFFICULTY_EXTREME_DEMON ), ) level_type_data = rpc_data . level_type . expect ( EXPECTED_RPC_LEVEL_TYPE ) level_type = LevelTypeConfig ( null = level_type_data . null . expect ( EXPECTED_RPC_LEVEL_TYPE_NULL ), official = level_type_data . official . expect ( EXPECTED_RPC_LEVEL_TYPE_OFFICIAL ), editor = level_type_data . editor . expect ( EXPECTED_RPC_LEVEL_TYPE_EDITOR ), saved = level_type_data . saved . expect ( EXPECTED_RPC_LEVEL_TYPE_SAVED ), online = level_type_data . online . expect ( EXPECTED_RPC_LEVEL_TYPE_ONLINE ), ) mode_data = rpc_data . mode . expect ( EXPECTED_RPC_MODE ) mode = ModeConfig ( normal = mode_data . normal . expect ( EXPECTED_RPC_MODE_NORMAL ), practice = mode_data . practice . expect ( EXPECTED_RPC_MODE_PRACTICE ), ) return cls ( process_name = process_name , refresh_seconds = refresh_seconds , client_id = client_id , editor = editor , level = level , scene = scene , difficulty = difficulty , level_type = level_type , mode = mode , )","title":"Config"},{"location":"config/#gd.rpc.config.Config.process_name","text":"The process name of the game.","title":"process_name"},{"location":"config/#gd.rpc.config.Config.refresh_seconds","text":"The seconds to wait before refreshing the RPC.","title":"refresh_seconds"},{"location":"config/#gd.rpc.config.Config.client_id","text":"The client ID of the Discord application.","title":"client_id"},{"location":"config/#gd.rpc.config.Config.editor","text":"The configuration of the RPC for when the user is in the editor.","title":"editor"},{"location":"config/#gd.rpc.config.Config.level","text":"The configuration of the RPC for when the user is playing some level.","title":"level"},{"location":"config/#gd.rpc.config.Config.scene","text":"The configuration to use for specific scenes, excluding the editor and level ones.","title":"scene"},{"location":"config/#gd.rpc.config.Config.difficulty","text":"The configuration to use for difficulty display.","title":"difficulty"},{"location":"config/#gd.rpc.config.Config.level_type","text":"The configuration to use for level type display.","title":"level_type"},{"location":"config/#gd.rpc.config.Config.mode","text":"The configuration to use for level play mode display.","title":"mode"},{"location":"config/#gd.rpc.config.Config.from_string","text":"Parses a Config from string . Parameters: Name Type Description Default string str The string to parse. required Returns: Type Description C The newly parsed Config . Source code in gd/rpc/config.py 243 244 245 246 247 248 249 250 251 252 253 @classmethod def from_string ( cls : Type [ C ], string : str ) -> C : \"\"\"Parses a [`Config`][gd.rpc.config.Config] from `string`. Arguments: string: The string to parse. Returns: The newly parsed [`Config`][gd.rpc.config.Config]. \"\"\" return cls . from_data ( cls . parse ( string ))","title":"from_string()"},{"location":"config/#gd.rpc.config.Config.from_path","text":"Parses a Config from file path . Parameters: Name Type Description Default path IntoPath The path to the config. required Returns: Type Description C The newly parsed Config instance. Source code in gd/rpc/config.py 255 256 257 258 259 260 261 262 263 264 265 266 267 @classmethod def from_path ( cls : Type [ C ], path : IntoPath , encoding : str = DEFAULT_ENCODING , errors : str = DEFAULT_ERRORS ) -> C : \"\"\"Parses a [`Config`][gd.rpc.config.Config] from file `path`. Arguments: path: The path to the config. Returns: The newly parsed [`Config`][gd.rpc.config.Config] instance. \"\"\" return cls . from_string ( Path ( path ) . read_text ( encoding , errors ))","title":"from_path()"},{"location":"config/#gd.rpc.config.Config.from_data","text":"Creates a Config from ConfigData . Parameters: Name Type Description Default config_data AnyConfigData The configuration data to use. required Returns: Type Description C The newly created Config instance. Source code in gd/rpc/config.py 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 @classmethod def from_data ( cls : Type [ C ], config_data : AnyConfigData ) -> C : \"\"\"Creates a [`Config`][gd.rpc.config.Config] from [`ConfigData`][gd.rpc.config.ConfigData]. Arguments: config_data: The configuration data to use. Returns: The newly created [`Config`][gd.rpc.config.Config] instance. \"\"\" default_config = DEFAULT_CONFIG rpc_data = config_data . rpc . unwrap_or_else ( AnyConfigData ) process_name = rpc_data . process_name . unwrap_or ( default_config . process_name ) refresh_seconds = rpc_data . refresh_seconds . unwrap_or ( default_config . refresh_seconds ) client_id = rpc_data . client_id . unwrap_or ( default_config . client_id ) editor_data = rpc_data . editor . unwrap_or_else ( AnyConfigData ) editor_config = default_config . editor editor = EditorConfig ( details = editor_data . details . unwrap_or ( editor_config . details ), state = editor_data . state . unwrap_or ( editor_config . state ), ) level_data = rpc_data . level . unwrap_or_else ( AnyConfigData ) level_config = default_config . level level = LevelConfig ( details = level_data . details . unwrap_or ( level_config . details ), state = level_data . state . unwrap_or ( level_config . state ), small = level_data . small . unwrap_or ( level_config . small ), progress_precision = level_data . progress_precision . unwrap_or ( level_config . progress_precision ), ) scene_data = rpc_data . scene . unwrap_or_else ( AnyConfigData ) scene_config = default_config . scene scene = SceneConfig ( main = scene_data . main . unwrap_or ( scene_config . main ), select = scene_data . select . unwrap_or ( scene_config . select ), editor_or_level = scene_data . editor_or_level . unwrap_or ( scene_config . editor_or_level ), search = scene_data . search . unwrap_or ( scene_config . search ), leaderboard = scene_data . leaderboard . unwrap_or ( scene_config . leaderboard ), online = scene_data . online . unwrap_or ( scene_config . online ), official_select = scene_data . official_select . unwrap_or ( scene_config . official_select ), official_level = scene_data . official_level . unwrap_or ( scene_config . official_level ), ) difficulty_data = rpc_data . difficulty . unwrap_or_else ( AnyConfigData ) difficulty_config = default_config . difficulty difficulty = DifficultyConfig ( unknown = difficulty_data . unknown . unwrap_or ( difficulty_config . unknown ), auto = difficulty_data . auto . unwrap_or ( difficulty_config . auto ), easy = difficulty_data . easy . unwrap_or ( difficulty_config . easy ), normal = difficulty_data . normal . unwrap_or ( difficulty_config . normal ), hard = difficulty_data . hard . unwrap_or ( difficulty_config . hard ), harder = difficulty_data . harder . unwrap_or ( difficulty_config . harder ), insane = difficulty_data . insane . unwrap_or ( difficulty_config . insane ), demon = difficulty_data . demon . unwrap_or ( difficulty_config . demon ), easy_demon = difficulty_data . easy_demon . unwrap_or ( difficulty_config . easy_demon ), medium_demon = difficulty_data . medium_demon . unwrap_or ( difficulty_config . medium_demon ), hard_demon = difficulty_data . hard_demon . unwrap_or ( difficulty_config . hard_demon ), insane_demon = difficulty_data . insane_demon . unwrap_or ( difficulty_config . insane_demon ), extreme_demon = difficulty_data . extreme_demon . unwrap_or ( difficulty_config . extreme_demon ), ) level_type_data = rpc_data . level_type . unwrap_or_else ( AnyConfigData ) level_type_config = default_config . level_type level_type = LevelTypeConfig ( null = level_type_data . null . unwrap_or ( level_type_config . null ), official = level_type_data . official . unwrap_or ( level_type_config . official ), editor = level_type_data . editor . unwrap_or ( level_type_config . editor ), saved = level_type_data . saved . unwrap_or ( level_type_config . saved ), online = level_type_data . online . unwrap_or ( level_type_config . online ), ) mode_data = rpc_data . mode . unwrap_or_else ( AnyConfigData ) mode_config = default_config . mode mode = ModeConfig ( normal = mode_data . normal . unwrap_or ( mode_config . normal ), practice = mode_data . practice . unwrap_or ( mode_config . practice ), ) return cls ( process_name = process_name , refresh_seconds = refresh_seconds , client_id = client_id , editor = editor , level = level , scene = scene , difficulty = difficulty , level_type = level_type , mode = mode , )","title":"from_data()"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"security/","text":"Security Policy Reporting Thank you for taking the time to responsibly disclose any problems you find. Do not file public issues as they are open for everyone to see! All security vulnerabilities in gd.rpc should be reported by email to security@nekit.dev . Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report. You can encrypt your report using our public key: BB2D8194464001E0B9B60EB8741A1EAD20FFDE8A . This key is also available on MIT's Key Server and reproduced below . After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours. Disclosure Policy gd.rpc has a 5-step disclosure process: The security report is received and is assigned a primary handler. This person will coordinate the fix and release process. The problem is confirmed and a list of all affected versions is determined. Code is audited to find any potential similar problems. Fixes are prepared for all releases which are still under maintenance. These fixes are not committed to the public repository but rather held locally pending the announcement. On the embargo date, the changes are pushed to the public repository and new builds are deployed. This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner. Security Key -----BEGIN PGP PUBLIC KEY BLOCK----- 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 1oYi7ft0FnZ67Wnk5+E+ =VRe2 -----END PGP PUBLIC KEY BLOCK----- Attribution This Security Policy is adapted from Rust's Security Policy .","title":"Security"},{"location":"security/#security-policy","text":"","title":"Security Policy"},{"location":"security/#reporting","text":"Thank you for taking the time to responsibly disclose any problems you find. Do not file public issues as they are open for everyone to see! All security vulnerabilities in gd.rpc should be reported by email to security@nekit.dev . Your report will be acknowledged within 24 hours, and you will receive a more detailed response within 48 hours indicating the next steps in handling your report. You can encrypt your report using our public key: BB2D8194464001E0B9B60EB8741A1EAD20FFDE8A . This key is also available on MIT's Key Server and reproduced below . After the initial reply to your report, the core team will try to keep you informed of the progress being made towards a fix and official announcement. These updates will be sent at least every five days. In reality, this is more likely to be every 24-48 hours.","title":"Reporting"},{"location":"security/#disclosure-policy","text":"gd.rpc has a 5-step disclosure process: The security report is received and is assigned a primary handler. This person will coordinate the fix and release process. The problem is confirmed and a list of all affected versions is determined. Code is audited to find any potential similar problems. Fixes are prepared for all releases which are still under maintenance. These fixes are not committed to the public repository but rather held locally pending the announcement. On the embargo date, the changes are pushed to the public repository and new builds are deployed. This process can take some time, especially when coordination is required with maintainers of other projects. Every effort will be made to handle the issue in as timely a manner as possible, however it is important that we follow the release process above to ensure that the disclosure is handled in a consistent manner.","title":"Disclosure Policy"},{"location":"security/#security-key","text":"-----BEGIN PGP PUBLIC KEY BLOCK----- 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 1oYi7ft0FnZ67Wnk5+E+ =VRe2 -----END PGP PUBLIC KEY BLOCK-----","title":"Security Key"},{"location":"security/#attribution","text":"This Security Policy is adapted from Rust's Security Policy .","title":"Attribution"}]}